services:
  postgres:
    image: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: kestra
      POSTGRES_USER: kestra
      POSTGRES_PASSWORD: k3str4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10

#### We're just jotting down the code to run a containerized version of Postgres ny_taxi DB on docker, using the 
#### above info as reference (following tutorial)

docker run -it \
    --name pg_ny_taxi \
    -e POSTGRES_USER="root" \
    -e POSTGRES_PASSWORD="root" \
    -e POSTGRES_DB="ny_taxi" \
    -v $(pwd)/ny_taxi_postgres_data:/var/lib/postgresql/data \
    -p 5432:5432 \
    postgres:13

# without the --name code, docker was creating a new container everytime I ran it.

# Explaining the container creation code above:
The container needs 3 environment variables:

POSTGRES_USER is the username for logging into the database. We chose root.
POSTGRES_PASSWORD is the password for the database. We chose root
IMPORTANT: These values are only meant for testing. Please change them for any serious project.

POSTGRES_DB is the name that we will give the database. We chose ny_taxi.
-v points to the volume directory. The colon : separates the first part (path to the folder in the host computer) from the second part (path to the folder inside the container).
Path names must be absolute. If you're in a UNIX-like system, you can use pwd to print you local folder as a shortcut; this example should work with both bash and zsh shells, but fish will require you to remove the $.
This command will only work if you run it from a directory which contains the ny_taxi_postgres_data subdirectory you created above.
The -p is for port mapping. We map the default Postgres port to the same port in the host.
The last argument is the image name and tag. We run the official postgres image on its version 13.

# Running pgadmin image in docker

docker run -it \
  -e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \
  -e PGADMIN_DEFAULT_PASSWORD="root" \
  -p 8080:80 \
  dpage/pgadmin4


#### Adding the Postgres pg_ny_taxi container to a network (docker network)

# Use this code (since you already have a pg_ny_taxi container)
docker network connect pg-network pg_ny_taxi

# Code from from tutorial - for reference
docker network create pg-network

docker run -it \
    -e POSTGRES_USER="root" \
    -e POSTGRES_PASSWORD="root" \
    -e POSTGRES_DB="ny_taxi" \
    -v $(pwd)/ny_taxi_postgres_data:/var/lib/postgresql/data \
    -p 5432:5432 \
    --network=pg-network \
    --name pg_ny_taxi \
    postgres:13

#### Adding Pgadmin container to a network

docker run -it \
    -e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \
    -e PGADMIN_DEFAULT_PASSWORD="root" \
    -p 8080:80 \
    --network=pg-network \
    --name pgadmin \
    dpage/pgadmin4


